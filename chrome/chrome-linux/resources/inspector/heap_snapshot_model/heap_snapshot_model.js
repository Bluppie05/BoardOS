var t=Object.freeze({__proto__:null,HeapSnapshotProgressEvent:{Update:"ProgressUpdate",BrokenSnapshot:"BrokenSnapshot"},baseSystemDistance:1e8,AllocationNodeCallers:class{constructor(t,s){this.nodesWithSingleCaller=t,this.branchingCallers=s}},SerializedAllocationNode:class{constructor(t,s,i,e,o,h,a,d,n,c,r){this.id=t,this.name=s,this.scriptName=i,this.scriptId=e,this.line=o,this.column=h,this.count=a,this.size=d,this.liveCount=n,this.liveSize=c,this.hasChildren=r}},AllocationStackFrame:class{constructor(t,s,i,e,o){this.functionName=t,this.scriptName=s,this.scriptId=i,this.line=e,this.column=o}},Node:class{constructor(t,s,i,e,o,h,a){this.id=t,this.name=s,this.distance=i,this.nodeIndex=e,this.retainedSize=o,this.selfSize=h,this.type=a,this.canBeQueried=!1,this.detachedDOMTreeNode=!1}},Edge:class{constructor(t,s,i,e){this.name=t,this.node=s,this.type=i,this.edgeIndex=e}},Aggregate:class{constructor(){this.count,this.distance,this.self,this.maxRet,this.type,this.name,this.idxs}},AggregateForDiff:class{constructor(){this.indexes=[],this.ids=[],this.selfSizes=[]}},Diff:class{constructor(){this.addedCount=0,this.removedCount=0,this.addedSize=0,this.removedSize=0,this.deletedIndexes=[],this.addedIndexes=[],this.countDelta,this.sizeDelta}},DiffForClass:class{constructor(){this.addedCount,this.removedCount,this.addedSize,this.removedSize,this.deletedIndexes,this.addedIndexes,this.countDelta,this.sizeDelta}},ComparatorConfig:class{constructor(){this.fieldName1,this.ascending1,this.fieldName2,this.ascending2}},WorkerCommand:class{constructor(){this.callId,this.disposition,this.objectId,this.newObjectId,this.methodName,this.methodArguments,this.source}},ItemsRange:class{constructor(t,s,i,e){this.startPosition=t,this.endPosition=s,this.totalLength=i,this.items=e}},StaticData:class{constructor(t,s,i,e){this.nodeCount=t,this.rootNodeIndex=s,this.totalSize=i,this.maxJSObjectId=e}},Statistics:class{constructor(){this.total,this.v8heap,this.native,this.code,this.jsArrays,this.strings,this.system}},NodeFilter:class{constructor(t,s){this.minNodeId=t,this.maxNodeId=s,this.allocationNodeId}equals(t){return this.minNodeId===t.minNodeId&&this.maxNodeId===t.maxNodeId&&this.allocationNodeId===t.allocationNodeId}},SearchConfig:class{constructor(t,s,i,e,o){this.query=t,this.caseSensitive=s,this.isRegex=i,this.shouldJump=e,this.jumpBackward=o}},Samples:class{constructor(t,s,i){this.timestamps=t,this.lastAssignedIds=s,this.sizes=i}},Location:class{constructor(t,s,i){this.scriptId=t,this.lineNumber=s,this.columnNumber=i}}});export{t as HeapSnapshotModel};
